name: iOS Simulator CI

on:
  push:
    branches: [ main, master ]
    paths:
      - "**/*.swift"
      - "**/*.plist"
      - "**/*.xcconfig"
      - "**/*.yml"
      - ".github/workflows/ios-sim-build.yml"
  pull_request:
    branches: [ main, master ]
    paths:
      - "**/*.swift"
      - "**/*.plist"
      - "**/*.xcconfig"
      - "**/*.yml"
      - ".github/workflows/ios-sim-build.yml"

jobs:
  build-simulator:
    runs-on: macos-14

    env:
      HERE_API_KEY: ${{ secrets.HERE_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.*"

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Install XcodeGen
        run: |
          echo "Installing XcodeGen..."
          brew install xcodegen
          xcodegen --version

      - name: Generate Xcode Project
        run: |
          echo "Generating Xcode project from project.yml..."
          xcodegen generate
          echo "Generated Tariqak.xcodeproj successfully"
          ls -la *.xcodeproj/

      - name: Create Config directory and Secrets.xcconfig
        run: |
          echo "Creating Config directory..."
          mkdir -p Config
          echo "Creating Secrets.xcconfig..."
          cat > Config/Secrets.xcconfig <<EOF
          HERE_API_KEY = ${HERE_API_KEY}
          EOF
          echo "Created Config/Secrets.xcconfig"
          echo "Contents (redacted):"
          sed -e 's/\(HERE_API_KEY *= *\).*/\1*** (redacted)/' Config/Secrets.xcconfig

      - name: Verify project structure
        run: |
          echo "=== Project Structure ==="
          find . -name "*.xcodeproj" -o -name "*.yml" -o -name "*.swift" | head -20
          echo "=== Config Directory ==="
          ls -la Config/
          echo "========================="

      - name: Resolve Swift Package dependencies
        run: |
          echo "Resolving package dependencies..."
          xcodebuild -resolvePackageDependencies \
            -project Tariqak.xcodeproj \
            -scheme Tariqak

      - name: Build iOS (simulator) + save log
        run: |
          set -eo pipefail
          echo "Building iOS app for simulator..."
          mkdir -p build_logs
          xcodebuild \
            -project Tariqak.xcodeproj \
            -scheme Tariqak \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination 'generic/platform=iOS Simulator' \
            -derivedDataPath build \
            build | tee build_logs/xcodebuild.log
          echo "Build completed successfully!"


      - name: Find and zip the Simulator .app
        run: |
          APP_PATH="$(find . -type d -name '*-iphonesimulator.app' | head -n 1)"
          echo "Found app at: $APP_PATH"
          zip -r appetize-sim.zip "$APP_PATH"

      - name: Upload appetize zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: appetize-sim
          path: appetize-sim.zip
      - name: Quick error scan
        if: always()
        run: |
          echo "---- Scanning for errors/warnings ----"
          if [ -f "build_logs/xcodebuild.log" ]; then
            grep -nEi "error:|failed|fatal error|Undefined symbols|ld: " build_logs/xcodebuild.log || echo "No critical errors found"
          else
            echo "No build log found"
          fi
          echo "-------------------------------------"

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: build_logs/xcodebuild.log
          if-no-files-found: ignore

      - name: Upload .app product (if produced)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Tariqak-Debug-iphonesimulator.app
          path: build/Build/Products/Debug-iphonesimulator/Tariqak.app
          if-no-files-found: ignore
