name: iOS Simulator CI

on:
  push:
    branches: [ main, master ]
    paths:
      - "**/*.swift"
      - "**/*.plist"
      - "**/*.xcconfig"
      - "**/*.yml"
      - ".github/workflows/ios-sim-build.yml"
  pull_request:
    branches: [ main, master ]
    paths:
      - "**/*.swift"
      - "**/*.plist"
      - "**/*.xcconfig"
      - "**/*.yml"
      - ".github/workflows/ios-sim-build.yml"

jobs:
  build-simulator:
    runs-on: macos-14

    # Make the secret available (must be set in repo Settings → Secrets → Actions)
    env:
      HERE_API_KEY: ${{ secrets.HERE_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.*"

      - name: Show Xcode version
        run: xcodebuild -version

      # Install XcodeGen if project.yml exists
      - name: Install XcodeGen
        run: |
          if [ -f "project.yml" ]; then
            echo "Found project.yml, installing XcodeGen..."
            brew install xcodegen
          else
            echo "No project.yml found, skipping XcodeGen installation"
          fi

      # Generate Xcode project from project.yml
      - name: Generate Xcode Project
        run: |
          if [ -f "project.yml" ]; then
            echo "Generating Xcode project from project.yml..."
            xcodegen generate
            echo "Generated Tariqak.xcodeproj"
            ls -la *.xcodeproj/
          else
            echo "No project.yml found, expecting existing .xcodeproj"
          fi

      # Create the Secrets.xcconfig the project expects at Config/Secrets.xcconfig
      - name: Prepare Config/Secrets.xcconfig
        run: |
          mkdir -p Config
          cat > Config/Secrets.xcconfig <<EOF
          HERE_API_KEY = ${HERE_API_KEY}
          EOF
          echo "Created Config/Secrets.xcconfig"

      - name: Preview secrets file (redacted)
        run: |
          ls -la Config
          sed -e 's/\(HERE_API_KEY *= *\).*/\1*** (redacted)/' Config/Secrets.xcconfig

      - name: Verify project structure
        run: |
          echo "=== Project Structure ==="
          find . -name "*.xcodeproj" -o -name "*.yml" -o -name "*.swift" | head -20
          echo "========================="

      - name: Resolve Swift Package dependencies
        run: |
          xcodebuild -resolvePackageDependencies \
            -project Tariqak.xcodeproj \
            -scheme Tariqak

      - name: Build iOS (simulator) + save log
        run: |
          set -eo pipefail
          mkdir -p build_logs
          xcodebuild \
            -project Tariqak.xcodeproj \
            -scheme Tariqak \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination 'generic/platform=iOS Simulator' \
            -derivedDataPath build \
            build | tee build_logs/xcodebuild.log

      - name: Quick error scan
        if: always()
        run: |
          echo "---- Possible errors/warnings ----"
          if [ -f "build_logs/xcodebuild.log" ]; then
            grep -nEi "error:|failed|fatal error|Undefined symbols|ld: " build_logs/xcodebuild.log || true
          else
            echo "No build log found"
          fi
          echo "----------------------------------"

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: build_logs/xcodebuild.log
          if-no-files-found: ignore

      - name: Upload .app product (if produced)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Tariqak-Debug-iphonesimulator.app
          path: build/Build/Products/Debug-iphonesimulator/Tariqak.app
          if-no-files-found: ignore
